{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/eilif/work_projects/portfolio-site/nextjs_app/components/navbar/DarkModeToggle.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport useDarkMode from 'use-dark-mode';\nimport { useTheme } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\n\nvar DarkModeToggle = function DarkModeToggle() {\n  _s();\n\n  var _useState = useState(false),\n      isClient = _useState[0],\n      setIsClient = _useState[1];\n\n  var _useDarkMode = useDarkMode(),\n      isDark = _useDarkMode.value,\n      toggleDarkMode = _useDarkMode.toggle;\n\n  console.log(isDark);\n  var theme = useTheme();\n  useEffect(function () {\n    setIsClient(true);\n  }, []);\n  return __jsx(React.Fragment, null, isClient && __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      onChange: toggleDarkMode,\n      inputProps: {\n        'aria-label': 'darkmode toggle'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }\n    }),\n    label: __jsx(Brightness4Icon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 18\n      }\n    }),\n    name: \"darkmode toggle\",\n    checked: isDark,\n    style: {\n      paddingLeft: theme.spacing(1)\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(DarkModeToggle, \"0JOfuQlcAcpLyVIZz9tskP1pa9g=\", false, function () {\n  return [useDarkMode, useTheme];\n});\n\n_c = DarkModeToggle;\nexport default DarkModeToggle;\n\nvar _c;\n\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"sources":["/home/eilif/work_projects/portfolio-site/nextjs_app/components/navbar/DarkModeToggle.jsx"],"names":["useState","useEffect","useDarkMode","useTheme","FormControlLabel","Switch","Brightness4Icon","DarkModeToggle","isClient","setIsClient","isDark","value","toggleDarkMode","toggle","console","log","theme","paddingLeft","spacing"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AAAA,kBACKP,QAAQ,CAAC,KAAD,CADb;AAAA,MACpBQ,QADoB;AAAA,MACVC,WADU;;AAAA,qBAEuBP,WAAW,EAFlC;AAAA,MAEZQ,MAFY,gBAEnBC,KAFmB;AAAA,MAEIC,cAFJ,gBAEJC,MAFI;;AAG3BC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,MAAMM,KAAK,GAAGb,QAAQ,EAAtB;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,4BACGD,QAAQ,IACP,MAAC,gBAAD;AACE,IAAA,OAAO,EAAE,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEI,cAAlB;AAAkC,MAAA,UAAU,EAAE;AAAE,sBAAc;AAAhB,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADX;AAEE,IAAA,KAAK,EAAE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFT;AAGE,IAAA,IAAI,EAAC,iBAHP;AAIE,IAAA,OAAO,EAAEF,MAJX;AAKE,IAAA,KAAK,EAAE;AAAEO,MAAAA,WAAW,EAAED,KAAK,CAACE,OAAN,CAAc,CAAd;AAAf,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF;AAaD,CAvBD;;GAAMX,c;UAE8CL,W,EAEpCC,Q;;;KAJVI,c;AAyBN,eAAeA,cAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport useDarkMode from 'use-dark-mode'\nimport { useTheme } from '@material-ui/core'\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport Brightness4Icon from '@material-ui/icons/Brightness4'\n\nconst DarkModeToggle = () => {\n  const [isClient, setIsClient] = useState(false)\n  const { value: isDark, toggle: toggleDarkMode } = useDarkMode()\n  console.log(isDark)\n  const theme = useTheme()\n\n  useEffect(() => {\n    setIsClient(true)\n  }, [])\n\n  return (\n    <>\n      {isClient && (\n        <FormControlLabel\n          control={<Switch onChange={toggleDarkMode} inputProps={{ 'aria-label': 'darkmode toggle' }} />}\n          label={<Brightness4Icon />}\n          name='darkmode toggle'\n          checked={isDark}\n          style={{ paddingLeft: theme.spacing(1) }}\n        />)}\n    </>\n\n  )\n}\n\nexport default DarkModeToggle\n"]},"metadata":{},"sourceType":"module"}