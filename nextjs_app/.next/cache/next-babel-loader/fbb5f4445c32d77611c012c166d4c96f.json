{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core';\nimport useDarkMode from 'use-dark-mode';\nconst coreTheme = {\n  typography: {\n    h1: {\n      fontSize: 80\n    }\n  }\n};\nconst lightTheme = responsiveFontSizes(createMuiTheme(_objectSpread(_objectSpread({}, coreTheme), {}, {\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#C21E56'\n    },\n    secondary: {\n      main: '#d00060'\n    }\n  }\n})));\nconst darkTheme = responsiveFontSizes(createMuiTheme(_objectSpread(_objectSpread({}, coreTheme), {}, {\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#b22e5b'\n    },\n    secondary: {\n      main: '#bb1562'\n    }\n  }\n})));\nexport default function useThemeConfig() {\n  const {\n    value: isDark\n  } = useDarkMode();\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(lightTheme);\n  useEffect(() => {\n    isDark ? setTheme(darkTheme) : setTheme(lightTheme);\n  }, [isDark]);\n  return theme;\n}","map":{"version":3,"sources":["/home/eilif/work_projects/portfolio-site/nextjs_app/lib/theme.js"],"names":["useEffect","useState","createMuiTheme","responsiveFontSizes","useDarkMode","coreTheme","typography","h1","fontSize","lightTheme","palette","type","primary","main","secondary","darkTheme","useThemeConfig","value","isDark","theme","setTheme"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,mBAApD;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,EAAE,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR;AADM;AADI,CAAlB;AAQA,MAAMC,UAAU,GAAGN,mBAAmB,CACpCD,cAAc,iCACTG,SADS;AAEZK,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,OADC;AAEPC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC,KAFF;AAKPC,IAAAA,SAAS,EAAE;AACTD,MAAAA,IAAI,EAAE;AADG;AALJ;AAFG,GADsB,CAAtC;AAeA,MAAME,SAAS,GAAGZ,mBAAmB,CACnCD,cAAc,iCACTG,SADS;AAEZK,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,MADC;AAEPC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC,KAFF;AAKPC,IAAAA,SAAS,EAAE;AACTD,MAAAA,IAAI,EAAE;AADG;AALJ;AAFG,GADqB,CAArC;AAeA,eAAe,SAASG,cAAT,GAA2B;AACxC,QAAM;AAAEC,IAAAA,KAAK,EAAEC;AAAT,MAAoBd,WAAW,EAArC;AACA,QAAM;AAAA,OAACe,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAACQ,UAAD,CAAlC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,MAAM,GAAGE,QAAQ,CAACL,SAAD,CAAX,GAAyBK,QAAQ,CAACX,UAAD,CAAvC;AACD,GAFQ,EAEN,CAACS,MAAD,CAFM,CAAT;AAIA,SAAOC,KAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core'\nimport useDarkMode from 'use-dark-mode'\n\nconst coreTheme = {\n  typography: {\n    h1: {\n      fontSize: 80\n    }\n  }\n}\n\nconst lightTheme = responsiveFontSizes(\n  createMuiTheme({\n    ...coreTheme,\n    palette: {\n      type: 'light',\n      primary: {\n        main: '#C21E56'\n      },\n      secondary: {\n        main: '#d00060'\n      }\n    }\n  })\n)\n\nconst darkTheme = responsiveFontSizes(\n  createMuiTheme({\n    ...coreTheme,\n    palette: {\n      type: 'dark',\n      primary: {\n        main: '#b22e5b'\n      },\n      secondary: {\n        main: '#bb1562'\n      }\n    }\n  })\n)\n\nexport default function useThemeConfig () {\n  const { value: isDark } = useDarkMode()\n  const [theme, setTheme] = useState(lightTheme)\n\n  useEffect(() => {\n    isDark ? setTheme(darkTheme) : setTheme(lightTheme)\n  }, [isDark])\n\n  return theme\n}\n"]},"metadata":{},"sourceType":"module"}